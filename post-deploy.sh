#!/bin/bash
# post-deploy.sh - Script de p√≥s-deploy simplificado para Laravel
# Descri√ß√£o: publica assets do Livewire, limpa caches, ajusta permiss√µes e garante exist√™ncia de logs.

# -------------------------------------------------------------------------------
# CONFIGURA√á√ÉO INICIAL
# -------------------------------------------------------------------------------

# Obt√©m o caminho absoluto da pasta onde este script est√° localizado.
# Reason: garante que todos os comandos posteriores sejam executados no diret√≥rio correto do projeto.
ROOT_DIR=$(cd "$(dirname "$0")" && pwd)

# Define o usu√°rio do sistema que deve possuir os arquivos (normalmente o usu√°rio do PHP-FPM / web server).
# Reason: assegura que o servidor web tenha permiss√£o de leitura e escrita.
SITE_USER="barterapp-test-deploy"

# Navega at√© o diret√≥rio raiz do projeto; sai se falhar.
cd "$ROOT_DIR" || { echo "‚ùå N√£o foi poss√≠vel acessar $ROOT_DIR"; exit 1; }

echo "üöÄ Iniciando script p√≥s-deploy Laravel..."

# -----------------------------------------------------------------------------
# MODO DE MANUTEN√á√ÉO
# -----------------------------------------------------------------------------
echo "üîí Habilitando modo de manuten√ß√£o..."
# Reason: Evita que usu√°rios vejam erros durante o deploy e mant√©m o site offline temporariamente
php artisan down --secret="deploying"


# -------------------------------------------------------------------------------
# PUBLICA√á√ÉO DE ASSETS DO LIVEWIRE
# -------------------------------------------------------------------------------

echo "üîÑ Publicando assets do Livewire..."
# Reason: copia os arquivos JavaScript/CSS do Livewire (ex: livewire.js) do diret√≥rio vendor
#         para a pasta public/vendor/livewire, garantindo que o front-end do Livewire funcione.
php artisan vendor:publish --tag=livewire:assets --force



# -------------------------------------------------------------------------------
# LIMPEZA DE CACHES DO LARAVEL
# -------------------------------------------------------------------------------

echo "‚ö° Limpando caches do Laravel..."
# Reason: remove caches de configura√ß√£o, rotas, views, eventos e otimiza√ß√µes antigas,
#         evitando inconsist√™ncias ap√≥s deploy de novo c√≥digo.
php artisan optimize:clear



# -------------------------------------------------------------------------------
# AJUSTE DE PERMISS√ïES
# -------------------------------------------------------------------------------

echo "üìÅ Ajustando permiss√µes em storage/ e bootstrap/cache..."
# Reason: tanto o diret√≥rio storage (sess√µes, cache, logs) quanto bootstrap/cache
#         precisam ser grav√°veis pelo servidor web. chmod 775 garante permiss√£o
#         de leitura, escrita e execu√ß√£o para dono e grupo, e leitura/execu√ß√£o para outros.
chown -R $SITE_USER:$SITE_USER "$ROOT_DIR/storage" "$ROOT_DIR/bootstrap/cache"
chmod -R 775 "$ROOT_DIR/storage" "$ROOT_DIR/bootstrap/cache"



# -------------------------------------------------------------------------------
# GARANTIA DE EXIST√äNCIA DO ARQUIVO DE LOG
# -------------------------------------------------------------------------------

echo "üìÑ Garantindo que o arquivo de log exista..."
# Reason: o Laravel grava logs em storage/logs/laravel.log. Criar o arquivo e definir
#         as permiss√µes evita erros de ‚Äúpermission denied‚Äù ou ‚Äúfile not found‚Äù ao escrever no log.
mkdir -p "$ROOT_DIR/storage/logs"
touch "$ROOT_DIR/storage/logs/laravel.log"
chown $SITE_USER:$SITE_USER "$ROOT_DIR/storage/logs/laravel.log"
chmod 664 "$ROOT_DIR/storage/logs/laravel.log"
# chmod 664 d√° permiss√£o de leitura e escrita ao dono e grupo, e leitura a outros.

echo "‚úÖ Permiss√µes e assets ajustados com sucesso!"







#OTIMIZA√á√ïES




# -----------------------------------------------------------------------------
# OTIMIZA√á√ÉO DO AUTOLOAD
# -----------------------------------------------------------------------------
echo "üß© Gerando autoload otimizado com Composer (dump-autoload -o)..."
# Reason: Reconstr√≥i o mapa de classes para melhorar o desempenho de carregamento de classes
composer dump-autoload -o

# -----------------------------------------------------------------------------
# LIMPEZA DE CACHES DO LARAVEL
# -----------------------------------------------------------------------------
echo "‚ö° Limpando caches (config, rotas, views, eventos)..."
# Reason: Remove caches antigas para evitar inconsist√™ncias ap√≥s altera√ß√µes de c√≥digo
php artisan optimize:clear

# -----------------------------------------------------------------------------
# LINK S√çMBOLICO DO STORAGE
# -----------------------------------------------------------------------------
echo "üîó Criando link simb√≥lico storage (storage:link)..."
# Reason: Garante acesso p√∫blico aos arquivos armazenados em storage/app/public via public/storage
php artisan storage:link || true

# -----------------------------------------------------------------------------
# BUILD DE ASSETS FRONT-END
# -----------------------------------------------------------------------------
echo "üì¶ Instalando depend√™ncias JavaScript/CSS (npm ci)..."
# Reason: Instala vers√µes exatas de pacotes front-end definidas no package-lock.json
npm ci --silent

echo "üöß Compilando assets front-end (npm run build)..."
# Reason: Gera arquivos otimizados (minificados) para produ√ß√£o
npm run build --silent


# -----------------------------------------------------------------------------
# CACHE DE CONFIGURA√á√ÉO, ROTAS E VIEWS
# -----------------------------------------------------------------------------
echo "‚ö° Gerando cache de config, rotas e views para produ√ß√£o..."
# Reason: Cria arquivos de cache para acelerar inicializa√ß√£o da aplica√ß√£o em produ√ß√£o
php artisan config:cache
php artisan route:cache
php artisan view:cache

# -----------------------------------------------------------------------------
# REIN√çCIO DE FILAS E SERVI√áOS
# -----------------------------------------------------------------------------
echo "‚ñ∂ Reiniciando workers de fila (queue:restart)..."
# Reason: Faz os workers recarregarem o novo c√≥digo sem reiniciar o servi√ßo manualmente
php artisan queue:restart

echo "üîÑ Reiniciando servi√ßos (PHP-FPM e Nginx)..."
# Reason: Aplica mudan√ßas de configura√ß√£o e limpa OPcache para o novo deployment
sudo systemctl restart php8.4-fpm || true
sudo systemctl reload nginx || true

# -----------------------------------------------------------------------------
# REGISTRO DE VERS√ÉO
# -----------------------------------------------------------------------------
echo "üìå Registrando vers√£o no RELEASE.txt..."
# Reason: Mant√©m hist√≥rico de deploy com data/hora e hash do commit para auditoria
echo "$(date '+%Y-%m-%d %H:%M:%S') ‚Äî $(git rev-parse --short HEAD)" > RELEASE.txt

# -----------------------------------------------------------------------------
# 13. DESATIVA√á√ÉO DO MODO DE MANUTEN√á√ÉO
# -----------------------------------------------------------------------------
echo "üîì Desativando modo de manuten√ß√£o..."
# Reason: Traz o site de volta online ap√≥s completar o deploy
php artisan up

# -----------------------------------------------------------------------------
# NOTIFICA√á√ÉO DE DEPLOY (SLACK)
# -----------------------------------------------------------------------------
# Reason: Informa a equipe sobre o sucesso do deploy via canal de comunica√ß√£o
if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
  echo "üí¨ Enviando notifica√ß√£o para o Slack..."
  payload=$(jq -nc --arg text "Deploy realizado: $(git rev-parse --short HEAD) em $(date '+%Y-%m-%d %H:%M:%S')" '{text: $text}')
  curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
fi

# -----------------------------------------------------------------------------
# FINALIZA√á√ÉO
# -----------------------------------------------------------------------------
echo "‚úÖ Deploy conclu√≠do com sucesso 23456789111111111!"
