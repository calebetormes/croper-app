#!/bin/bash
# post-deploy.sh - Script de p√≥s-deploy automatizado para Laravel + Filament
# Descri√ß√£o: publica assets, limpa caches, executa migrations, build front-end,
#             ajusta permiss√µes, reinicia servi√ßos e envia notifica√ß√£o opcional.

# Interrompe a execu√ß√£o em caso de qualquer erro para evitar deploy parcial
set -e

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO INICIAL
# -----------------------------------------------------------------------------
# Obt√©m o caminho absoluto do diret√≥rio raiz do projeto (onde est√° este script)
ROOT_DIR=$(cd "$(dirname "$0")" && pwd)

# Define o usu√°rio do sistema respons√°vel pelo servidor web / PHP-FPM
SITE_USER="barterapp-dev-croper"

# L√™ vari√°vel opcional para enviar notifica√ß√µes ao Slack
SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL:-}"

# Move-se para o diret√≥rio do projeto; necess√°rio para que todos os comandos sejam executados no contexto correto
echo "üìÇ Acessando diret√≥rio do projeto: $ROOT_DIR"
cd "$ROOT_DIR" || { echo "‚ùå N√£o foi poss√≠vel acessar $ROOT_DIR"; exit 1; }

# -----------------------------------------------------------------------------
# 1. MODO DE MANUTEN√á√ÉO
# -----------------------------------------------------------------------------
echo "üîí Habilitando modo de manuten√ß√£o..."
# Reason: Evita que usu√°rios vejam erros durante o deploy e mant√©m o site offline temporariamente
php artisan down --secret="deploying"

# -----------------------------------------------------------------------------
# 2. OTIMIZA√á√ÉO DO AUTOLOAD
# -----------------------------------------------------------------------------
echo "üß© Gerando autoload otimizado com Composer (dump-autoload -o)..."
# Reason: Reconstr√≥i o mapa de classes para melhorar o desempenho de carregamento de classes
composer dump-autoload -o

# -----------------------------------------------------------------------------
# 3. PUBLICA√á√ÉO DE ASSETS DO LIVEWIRE
# -----------------------------------------------------------------------------
echo "üîÑ Publicando assets do Livewire (livewire.js)..."
# Reason: Garante que os arquivos de front-end do Livewire sejam copiados para public/vendor/livewire
php artisan vendor:publish --tag=livewire:assets --force

# -----------------------------------------------------------------------------
# 4. LIMPEZA DE CACHES DO LARAVEL
# -----------------------------------------------------------------------------
echo "‚ö° Limpando caches (config, rotas, views, eventos)..."
# Reason: Remove caches antigas para evitar inconsist√™ncias ap√≥s altera√ß√µes de c√≥digo
php artisan optimize:clear

# -----------------------------------------------------------------------------
# 5. LINK S√çMBOLICO DO STORAGE
# -----------------------------------------------------------------------------
echo "üîó Criando link simb√≥lico storage (storage:link)..."
# Reason: Garante acesso p√∫blico aos arquivos armazenados em storage/app/public via public/storage
php artisan storage:link || true

# -----------------------------------------------------------------------------
# 6. MIGRA√á√ïES E SEEDERS
# -----------------------------------------------------------------------------
echo "üóÑÔ∏è  Executando migra√ß√µes de banco de dados..."
# Reason: Atualiza a estrutura do banco de dados conforme mudan√ßas em migrations
php artisan migrate --force

echo "üå± Executando seeders (popula√ß√£o de dados)..."
# Reason: Popula tabelas com dados padr√£o ou de teste necess√°rios para a aplica√ß√£o
php artisan db:seed --force

# -----------------------------------------------------------------------------
# 7. BUILD DE ASSETS FRONT-END
# -----------------------------------------------------------------------------
echo "üì¶ Instalando depend√™ncias JavaScript/CSS (npm ci)..."
# Reason: Instala vers√µes exatas de pacotes front-end definidas no package-lock.json
npm ci --silent

echo "üöß Compilando assets front-end (npm run build)..."
# Reason: Gera arquivos otimizados (minificados) para produ√ß√£o
npm run build --silent

# -----------------------------------------------------------------------------
# 8. CACHE DE CONFIGURA√á√ÉO, ROTAS E VIEWS
# -----------------------------------------------------------------------------
echo "‚ö° Gerando cache de config, rotas e views para produ√ß√£o..."
# Reason: Cria arquivos de cache para acelerar inicializa√ß√£o da aplica√ß√£o em produ√ß√£o
php artisan config:cache
php artisan route:cache
php artisan view:cache

# -----------------------------------------------------------------------------
# 9. AJUSTE DE PERMISS√ïES
# -----------------------------------------------------------------------------
echo "üìÅ Ajustando permiss√µes em storage/ e bootstrap/cache..."
# Reason: Garante permiss√£o de leitura/escrita para o servidor web nesses diret√≥rios cr√≠ticos
chown -R $SITE_USER:$SITE_USER "$ROOT_DIR/storage" "$ROOT_DIR/bootstrap/cache"
chmod -R 775 "$ROOT_DIR/storage" "$ROOT_DIR/bootstrap/cache"

# -----------------------------------------------------------------------------
# 10. GARANTIA DO ARQUIVO DE LOG
# -----------------------------------------------------------------------------
echo "üìÑ Garantindo exist√™ncia e permiss√£o do laravel.log..."
# Reason: Assegura que o arquivo de log exista e possa ser escrito pela aplica√ß√£o
mkdir -p "$ROOT_DIR/storage/logs"
touch "$ROOT_DIR/storage/logs/laravel.log"
chown $SITE_USER:$SITE_USER "$ROOT_DIR/storage/logs/laravel.log"
chmod 664 "$ROOT_DIR/storage/logs/laravel.log"

# -----------------------------------------------------------------------------
# 11. REIN√çCIO DE FILAS E SERVI√áOS
# -----------------------------------------------------------------------------
echo "‚ñ∂ Reiniciando workers de fila (queue:restart)..."
# Reason: Faz os workers recarregarem o novo c√≥digo sem reiniciar o servi√ßo manualmente
php artisan queue:restart

echo "üîÑ Reiniciando servi√ßos (PHP-FPM e Nginx)..."
# Reason: Aplica mudan√ßas de configura√ß√£o e limpa OPcache para o novo deployment
sudo systemctl restart php8.4-fpm || true
sudo systemctl reload nginx || true

# -----------------------------------------------------------------------------
# 12. REGISTRO DE VERS√ÉO
# -----------------------------------------------------------------------------
echo "üìå Registrando vers√£o no RELEASE.txt..."
# Reason: Mant√©m hist√≥rico de deploy com data/hora e hash do commit para auditoria
echo "$(date '+%Y-%m-%d %H:%M:%S') ‚Äî $(git rev-parse --short HEAD)" > RELEASE.txt

# -----------------------------------------------------------------------------
# 13. DESATIVA√á√ÉO DO MODO DE MANUTEN√á√ÉO
# -----------------------------------------------------------------------------
echo "üîì Desativando modo de manuten√ß√£o..."
# Reason: Traz o site de volta online ap√≥s completar o deploy
php artisan up

# -----------------------------------------------------------------------------
# 14. NOTIFICA√á√ÉO DE DEPLOY (SLACK)
# -----------------------------------------------------------------------------
# Reason: Informa a equipe sobre o sucesso do deploy via canal de comunica√ß√£o
if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
  echo "üí¨ Enviando notifica√ß√£o para o Slack..."
  payload=$(jq -nc --arg text "Deploy realizado: $(git rev-parse --short HEAD) em $(date '+%Y-%m-%d %H:%M:%S')" '{text: $text}')
  curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
fi

# -----------------------------------------------------------------------------
# FINALIZA√á√ÉO
# -----------------------------------------------------------------------------
echo "‚úÖ Deploy conclu√≠do com sucesso!"
